// GitbubBranch name change ---------
// igthub repo url değişkene ata -------
//  workingDirectory : ""
// hangi bracnhten zipleniyorsa onun adı yazsın -------
// parametreleri farklı bir biçimde düzenle
def VirtualMachines = [
       test: [
         host: [
            [
                name: 'test',
                host: '3.75.224.143',
                user: '',
                identityFile: '',
                allowAnyHosts: true,
                portNumber: 10000
            ]
        ],
        gitBranchName: "test",
       ],
]

def VirtualMachinesEnvironment = VirtualMachines.keySet().toList();
def selectedEnvironment = VirtualMachines[parameters]

pipeline {
    agent any
    
    parameters {
        choice choices: VirtualMachinesEnvironment, description: 'this is a description', name: 'parameters'
        
    }

    environment {
        APP_DIR = 'jenkinsapp'
        ZIP_FILE_NAME = "jenkinsapp_${BUILD_NUMBER}_${selectedEnvironment.gitBranchName}.zip"
        S3_BUCKET = 'jenkinsfastapi'
        GITHUB_URL = 'https://github.com/erdemdoganayy/fastapi-jenkins'
        DOCKER_REPO = "jrdeveloper06/python-crud"
    }
    stages {

         stage('Checkout & Github Repo Clone') {
                steps  {
                checkout changelog: false,
                         scm: scmGit(userRemoteConfigs: [
                         [ credentialsId: 'my-github-id',
                           url: 'https://github.com/erdemdoganayy/flask-mongodb.git' ]
                         ])
                }
            }
        stage('Docker Build & Push') {
             steps  {
                 script {
                 withCredentials([
                 string(credentialsId: 'DOCKER_USERNAME', variable: 'DOCKER_USERNAME'),
                 string(credentialsId: 'DOCKER_PASSWORD', variable: 'DOCKER_PASSWORD')
                 ]) {
                     // Docker Build
                     sh "docker build -t ${env.DOCKER_REPO}:${BUILD_NUMBER} ."
                     // Docker Push
                     sh "docker push ${env.DOCKER_REPO}:${BUILD_NUMBER}" 
                 }
                 }
             }
        }
        stage("Clean Up") {
            steps {
                sh "docker image rm ${env.DOCKER_REPO}:${BUILD_NUMBER}"
            }
        }
        
        stage('Remote SSH') {
            steps {
                script {
                    withCredentials([sshUserPrivateKey(credentialsId: 'aws-flask-machine', keyFileVariable: 'KEY', usernameVariable: 'USERNAME')])
                    {
                        for (server in selectedEnvironment.host) {
                            server.user = USERNAME
                            server.identityFile = KEY
                        
                            stage("${server.name} - Git Repo Clone") {

                                // SSH PUT İLE JENKİNS WORKSPACE DİZİNİNDEKİ İNDİRİLEN REPOYU KARŞI SUNUCUYA AKTARIYOR || AKTARILMIŞ DOSYANIN ADINI DEĞİŞTİRİP ESKİSİNİ SİLİYOR
                               
                                sshCommand failOnError: false, remote: server, command: "cd /etc/rancher/rke2 && kubectl apply -f deployment.yaml"
                                sshCommand failOnError: false, remote: server, command: "DOCKER_IMAGE_TAG=$(docker images --format="{{.Tag}}" jrdeveloper06/python-crud)"
                                sshCommand failOnError: false, remote: server, command: "cd /etc/rancher/rke2 && kubectl set image deployment/flask-mongodb-deployment flask-app=jrdeveloper06/python-crud:$DOCKER_IMAGE_TAG"
                                sshCommand failOnError: false, remote: server, command: "docker rmi $(docker images -q)"

                            }
                          
                        }
                    }
                }
            }
        }
    }
}
