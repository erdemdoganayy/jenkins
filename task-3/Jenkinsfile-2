def VirtualMachines = [
       test: [
         host: [
            [
                name: 'test',
                host: '192.168.56.158',
                user: '',
                identityFile: '',
                allowAnyHosts: true,
            ]
        ],
        githubBranch: "test"
       ],
       dev: [
         host: [
            [
                name: 'dev',
                host: '192.168.56.158',
                user: '',
                identityFile: '',
                allowAnyHosts: true,
            ]
        ],
        githubBranch: "dev"
       ],
       prod: [
         host: [
            [
                name: 'prod',
                host: '192.168.56.158',
                user: '',
                identityFile: '',
                allowAnyHosts: true,
            ]
        ],
        githubBranch: "prod"
       ],
       erdem: [
         host: [
            [
                name: 'erdem',
                host: '192.168.56.158',
                user: '',
                identityFile: '',
                allowAnyHosts: true,
            ]
        ],
        githubBranch: "erdem"
       ],
]

//Choice parametre dizisi oluşturup ".add" ile zincir dizi ekleniyor.Ardından properties ile bu oluşturulan dizi gönderiliyor.
choiceParameter = [];
choiceParameterName = "Choose a branch"
choiceParameter.add(choice(name: choiceParameterName, 
                    choices: VirtualMachines.keySet() as List, 
                    description: "Codes related to the branch you choose will work"))
properties([
    disableConcurrentBuilds(),
    parameters(choiceParameter),
])
// VirtualMachines içerisindeki hostlar yukarıda seçilen branch'e göre seçiliyor.
def selectedEnvironment = VirtualMachines[params[choiceParameterName]]

pipeline {
    agent any
    environment {
        APP_DIR = 'jenkinsapp'
        ZIP_FILE_NAME = "jenkinsapp_${BUILD_NUMBER}.zip"
        S3_BUCKET = 'jenkinsfastapi'
    }
    stages {
        stage('Checkout & Clone Repo') {
            steps {
                checkout changelog: false,
                         scm: scmGit(userRemoteConfigs: [
                         [ credentialsId: 'my-github-id',
                           url: 'https://github.com/erdemdoganayy/fastapi-jenkins']],
                           branches: [[name: selectedEnvironment.githubBranch ]]
                         )
            }
        }

        stage('Remote SSH') {
            steps {
                script {
                    withCredentials([sshUserPrivateKey(credentialsId: 'vagrant_vm_jenkinsid', usernameVariable: 'USERNAME', keyFileVariable: 'RSA_KEY')])
                    {
                        for (server in selectedEnvironment.host) {
                            server.user = USERNAME
                            server.identityFile = RSA_KEY
                        
                            stage("${server.name} - Repo Put To VM") {
                                // SSH PUT İLE JENKİNS WORKSPACE DİZİNİNDEKİ İNDİRİLEN REPOYU KARŞI SUNUCUYA AKTARIYOR || AKTARILMIŞ DOSYANIN ADINI DEĞİŞTİRİP ESKİSİNİ SİLİYOR
                                sshPut failOnError: false, remote: server, from: '.', into: '/home/vagrant'
                               // sshCommand failOnError: false, remote: server, command: "cp -R ${JOB_NAME} ${APP_DIR} && rm -rf ${JOB_NAME}"
                            }
                            stage("${server.name} - Docker-Compose Down") {
                                // BELİRTİLMİŞ KLASÖRE GİRİYOR VE DOCKER COMPOSE DOWN YAPIYOR // CD Dir olarak düzelt
                                sshCommand failOnError: false, remote: server, command: "mv /home/vagrant/${JOB_NAME} /home/vagrant/${APP_DIR}"
                                dir("${APP_DIR}"){
                                    sshCommand failOnError: false, remote: server, command: "docker compose down"
                                }
                            }
                            stage("${server.name} - Backup & Push to S3") {
                                // ESKİ KODLARI ZİP HALİNE GETİRİP S3'E YEDEKLİYOR
                                sshCommand failOnError: false, remote: server, command: "zip -r ${ZIP_FILE_NAME} ${APP_DIR}"
                                sshCommand failOnError: false, remote: server, command: "aws s3 cp ${ZIP_FILE_NAME} s3://${env.S3_BUCKET}/ "
                            }
                            stage("${server.name} - Docker-Compose Build & Up") {
                                // BELİRTİLMİŞ KLASÖRE GİRİP DOCKER COMPOSE BUILD VE DOCKER COMPOSE UP YAPIYOR 
                                dir("${APP_DIR}"){
                                    sshCommand failOnError: false, remote: server, command: "docker compose build"
                                    sshCommand failOnError: false, remote: server, command: "docker compose up -d"
                                }
                            }
                            stage("${server.name} - Clean Up"){
                                // OLUŞTURULAN YEDEK ZIP SİLİNİYOR
                                sshCommand failOnError: false, remote: server, command: "rm -rf ${ZIP_FILE_NAME}"
                            }
                            stage("${server.name} - Output Shows") {
                                // BIR ÖNCEKİ STEPTE AYAĞA KALKAN CONTAINER'A CURL ATARAK 10 KERE ÇIKTISINI YAZDIRIYOR
                                if (selectedEnvironment.githubBranch == "test") {
                                 for (int i = 1; i <= 10; i++) {
                                    sshCommand failOnError: false, remote: server, command: 'curl --include http://localhost:10000'
                                 }
                                }
                                if (selectedEnvironment.githubBranch == "dev") {
                                 for (int i = 1; i <= 10; i++) {
                                    sshCommand failOnError: false, remote: server, command: 'curl --include http://localhost:9000'
                                 }
                                }
                                if (selectedEnvironment.githubBranch == "prod") {
                                 for (int i = 1; i <= 10; i++) {
                                    sshCommand failOnError: false, remote: server, command: 'curl --include http://localhost:11000'
                                 }
                                }
                                

                            }
                        }
                    }
                }
            }
        }
    }
}
